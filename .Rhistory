]
# 2. Construct patterns to find evidence for and against the rule “i before
# e except after c”?
words [
str_detect(words, "ei") &
words[!str_detect(words, "cei")]
]
words [
str_detect(words, "ei") &
words[!str_detect(words, "cei")]
]
words [
str_detect(words, "[^cei]")
]
words[str_detect(words, "ei") ]
str_view(colornames, "white|blue|green|gray|pint|red" )
colors_with_modifers <- str_view(colornames, "white|blue|green|gray|pint|red" )
colors_with_modifiers <- str_view(colornames, "white|blue|green|gray|pint|red" )
colors_with_modifiers
colors_with_modifiers <- str_view(colornames, "white|blue|green|gray|pint|red" )
colors_with_modifiers
str_view(colors_with_modifier, "*[^white|blue|green|gray|pint|red]")
str_view(colors_with_modifiers, "*[^white|blue|green|gray|pint|red]")
str_view(colors_with_modifiers, "*[^white]")
str_view(colors_with_modifiers, "(?!white)\\S+")
base_colors = c('white', 'blue', 'green', 'gray', 'pink', 'red' )
colornames <- colors()
base_colors
colornames
colors_with_modifiers <- str_view(colornames, "white|blue|green|gray|pint|red" )
colors_with_modifiers
tidyverse
library(tidyverse)
library(babynames)
data()
iris
data(package = "datasets")$results[, "Item"]
base_datasets <- data(package = "datasets")$results[, "Item"]
base_datasets
str_view(base_datasets, "(..)\\1")
str_view(base_datasets,  ".")
str_view(base_datasets,  "^.")
str_view(base_datasets,  "(\\w+)")
str_view(base_datasets,  "(\\w+)") |>
print(n = 94)
str_view(base_datasets,  "(\\w+)") |>
print(n = 104)
str_view(base_datasets,  "(\\w+)"), "\\1"
str_view(base_datasets,  "(\\w+)", "\\1")
str_view(base_datasets,  "(\\w+)\\1")
str_view(base_datasets,  "(\\w)\\1")
base_datasets <- data(package = "datasets")$results[, "Item"]
str_view(base_datasets,  "(\\w)\\1") |>
print(n = 104)
str_view(base_datasets,  "(\\w)") |>
print(n = 104)
str_view(base_datasets, "*" ) |>
print(n = 104)
str_view(base_datasets, "*" )
str_view(base_datasets, "[A-Za-z]+" ) |>
print(n = 104)
str_view(base_datasets, "[A-Za-z]$" ) |>
print(n = 104)
str_view(base_datasets, "[A-Za-z]" ) |>
print(n = 104)
str_view(base_datasets, "[A-Za-z]*" ) |>
print(n = 104)
str_view(base_datasets, "[A-Za-z]*\\b" ) |>
print(n = 104)
str_view(base_datasets, "^[A-Za-z]*" ) |>
print(n = 104)
base_datasets <- data(package = "datasets")$results[, "Item"]
dataset_names <- str_view(base_datasets, "^[A-Za-z]*" ) |>
print(n = 104)
base_datasets <- data(package = "datasets")$results[, "Item"]
dataset_names <- str_view(base_datasets, "^[A-Za-z]*" ) |>
print(n = 104)
dataset_names
dataset_names <- str_view(base_datasets, "^[A-Za-z]*" )
dataset_names
dataset_names <- str_match(base_datasets, "^[A-Za-z]*" )
dataset_names
## Ch16 - Factors
#===============================================================================
# Factors - outline
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
# factor basics --------------------------------------------------------------
# valid levels
# factor()
# forcats::fct()
# orders by first appearance:
# levels()
# readr::read_csv()
# col_factor() option
# General Social Survey ------------------------------------------------------
# NORC (Natl Opinion Research Center) University of Chicago
# gss_cat - small data subset
x1 <- c("Dec", "Apr", "Jan", "Mar")
x1
sort(x1)
## Ch16 - Factors
#===============================================================================
# Factors - outline
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
# factor basics --------------------------------------------------------------
# valid levels
# factor()
# forcats::fct()
# orders by first appearance:
# levels()
# readr::read_csv()
# col_factor() option
# General Social Survey ------------------------------------------------------
# NORC (Natl Opinion Research Center) University of Chicago
# gss_cat - small data subset
# Modifying factor order -----------------------------------------------------
# fct_reorder()
# fct_reorder2()
# fct_relevel()
# fct_infreq()
# fcr_rev()
# Modifying factor levels ----------------------------------------------------
# fct_recode()
# fct_collapse()
# fct_lump_* family of functions
# fct_lump_n()
# Ordered factors ------------------------------------------------------------
# ordered()
# Summary --------------------------------------------------------------------
# Function reference in forcats
# Wrangling categorical data in R
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
library(tidyverse)
# factor basics --------------------------------------------------------------
x1 <- c("Dec", "Apr", "Jan", "Mar")
x1
x2 <- c("Dec", "Apr", "Jam", "Mar")
x2
sort(x1)
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
month_levels
y1 <- factor(x1, levels = month_levels)
y1
y2 <- factor(x2, levels = month_levels)
y2
## Ch16 - Factors
#===============================================================================
# Factors - outline
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
# factor basics --------------------------------------------------------------
# valid levels
# factor()
# forcats::fct()
# orders by first appearance:
# levels()
# readr::read_csv()
# col_factor() option
# General Social Survey ------------------------------------------------------
# NORC (Natl Opinion Research Center) University of Chicago
# gss_cat - small data subset
# Modifying factor order -----------------------------------------------------
# fct_reorder()
# fct_reorder2()
# fct_relevel()
# fct_infreq()
# fcr_rev()
# Modifying factor levels ----------------------------------------------------
# fct_recode()
# fct_collapse()
# fct_lump_* family of functions
# fct_lump_n()
# Ordered factors ------------------------------------------------------------
# ordered()
# Summary --------------------------------------------------------------------
# Function reference in forcats
# Wrangling categorical data in R
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
library(tidyverse)
# factor basics --------------------------------------------------------------
x1 <- c("Dec", "Apr", "Jan", "Mar")
x1
x2 <- c("Dec", "Apr", "Jam", "Mar") # NOTE: typo for Jan
x2
sort(x1)
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
month_levels
y1 <- factor(x1, levels = month_levels)
y1
y2 <- factor(x2, levels = month_levels)
y2
# forcats::fct()
y2 <- fct(x2, levels = month_levels)
levels(y2)
csv <- "
month,value
Jan,12
Feb,56
Mar,12
csv <- "
month,value
csv <- "
month,value
Jan,12
Feb,56
Mar,12"
csv <- "
month,value
Jan,12
Feb,56
Mar,12"
df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
df$month
df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
df
df$month
?forcats
gss_cat
?gss_cat
gss_cat
glimpse(gss_cat)
gss_cat |>
count(race)
relig_summary <- gss_cat |>
group_by(relig) |>
summarize(
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
# fct_reorder()
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
geom_point()
relig_summary |>
mutate(
relig = fct_reorder(relig, tvhours)
) |>
ggplot(aes(x = tvhours, y = relig)) +
geom_point()
rincome_summary <- gss_cat |>
group_by(rincome) |>
summarize(
age = mean(age, na.rm = TRUE),
n = n()
)
ggplot(rincome_summary, aes(x = age, y = fct_reorder(rincome, age))) +
geom_point()
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
?forcats
library(tidyverse)
# factor basics --------------------------------------------------------------
x1 <- c("Dec", "Apr", "Jan", "Mar")
x1
x2 <- c("Dec", "Apr", "Jam", "Mar") # NOTE: typo for Jan
x2
sort(x1)
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
month_levels
y1 <- factor(x1, levels = month_levels)
y1
y2 <- factor(x2, levels = month_levels)
y2
# forcats::fct()
# y2 <- fct(x2, levels = month_levels)
#Error in `fct()`:
#  ! All values of `x` must appear in `levels` or `na`
# ℹ Missing level: "Jam"
# Run `rlang::last_trace()` to see where the error occurred.
factor(x1)
fct(x1) # sort by order of appearance
levels(y2)
csv <- "
month,value
Jan,12
Feb,56
Mar,12"
df <- read_csv(csv, col_types = cols(month = col_factor(month_levels)))
df
df$month
# General Social Survey ------------------------------------------------------
# NORC (Natl Opinion Research Center) University of Chicago
# gss_cat - small data subset
?gss_cat
gss_cat
glimpse(gss_cat)
gss_cat |>
count(race)
# Modifying factor order -------------------------------------------------------
relig_summary <- gss_cat |>
group_by(relig) |>
summarize(
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(relig_summary, aes(x = tvhours, y = relig)) +
geom_point()
# fct_reorder()
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
geom_point()
relig_summary |>
mutate(
relig = fct_reorder(relig, tvhours)
) |>
ggplot(aes(x = tvhours, y = relig)) +
geom_point()
rincome_summary <- gss_cat |>
group_by(rincome) |>
summarize(
age = mean(age, na.rm = TRUE),
n = n()
)
ggplot(rincome_summary, aes(x = age, y = fct_reorder(rincome, age))) +
geom_point()
# fct_reorder2()
# fct_relevel()
# fct_infreq()
# fcr_rev()
# fct_reorder()
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
geom_point()
relig_summary |>
mutate(
relig = fct_reorder(relig, tvhours)
) |>
ggplot(aes(x = tvhours, y = relig)) +
geom_point()
rincome_summary <- gss_cat |>
group_by(rincome) |>
summarize(
age = mean(age, na.rm = TRUE),
n = n()
)
rincome_summary
ggplot(rincome_sum
geom_point()
ggplot(rincome_summary, aes(x = age, y = fct_reorder(rincome, age))) +
geom_point()
ggplot(rincome_summary, aes(x = age, y = fct_relevel(rincome, "Not applicable"))) +
geom_point()
gss_cat |>
filter(!is.na(age)) |>
count(age, marital) |>
group_by(age) |>
mutate(
prop = n / sum(n)
)
ggplot(by_age, aes(x = age, y = prop, color = marital)) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Set1")
by_age <- gss_cat |>
filter(!is.na(age)) |>
count(age, marital) |>
group_by(age) |>
mutate(
prop = n / sum(n)
)
ggplot(by_age, aes(x = age, y = prop, color = marital)) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Set1")
ggplot(by_age, aes(x = age, y = prop, color = fct_reorder2(marital, age, prop))) +
geom_line(linewidth = 1) +
scale_color_brewer(palette = "Set1") +
labs(color = "marital")
gss_cat |>
mutate(marital = marital |> fct_infreq() |> fct_rev()) |>
ggplot(aes(x = marital)) +
geom_bar()
## Ch16 - Factors
#===============================================================================
# Factors - outline
# introduction----------------------------------------------------------------
# factor()
# gss_cat data
# prerequisites
# base R
# forcats in tidyverse
# factor basics --------------------------------------------------------------
# valid levels
# factor()
# forcats::fct()
# orders by first appearance:
# levels()
# readr::read_csv()
# col_factor() option
# General Social Survey ------------------------------------------------------
# NORC (Natl Opinion Research Center) University of Chicago
# gss_cat - small data subset
# Modifying factor order -----------------------------------------------------
# fct_reorder()
# fct_reorder2()
# fct_relevel()
# fct_infreq()
# fcr_rev()
# Modifying factor levels ----------------------------------------------------
# fct_recode()
# fct_collapse()
# fct_lump_* family of functions
# fct_lump_n()
# Ordered factors ------------------------------------------------------------
# ordered()
# Summary --------------------------------------------------------------------
# Function reference in forcats
# Wrangling categorical data in R
ggplot(gss_cat, aes(x = rincome)) +
geom_bar()
ggplot(gss_cat, aes(x = fct_infreq(rincome))) +
geom_bar()
glimpse(gss_cat)
ggplot(gss_cat, aes(x = fct_infreq(relig))) +
geom_bar()
library(tidyverse)
# 16.3.1 Exercises
# Explore the distribution of rincome (reported income). What makes the default
# bar chart hard to understand? How could you improve the plot?
# bar chart of rincome is hard to read since the value of the bars is
# neither increasing or decreasing
ggplot(gss_cat, aes(x = rincome)) +
geom_bar()
# this makes it easier to understand
ggplot(gss_cat, aes(x = fct_infreq(rincome))) +
geom_bar()
# What is the most common relig in this survey? What’s the most common partyid?
glimpse(gss_cat)
# religion - Protestant
ggplot(gss_cat, aes(x = fct_infreq(relig))) +
geom_bar()
# partyid
ggplot(gss_cat, aes(x = fct_infreq(partyid))) +
geom_bar()
gss_cat |> count(partyid)
gss_cat |>
mutate(
partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat"
)
) |>
count(partyid)
gss_cat |>
mutate(
partyid = fct_recode(partyid,
"Republican, strong"    = "Strong republican",
"Republican, weak"      = "Not str republican",
"Independent, near rep" = "Ind,near rep",
"Independent, near dem" = "Ind,near dem",
"Democrat, weak"        = "Not str democrat",
"Democrat, strong"      = "Strong democrat",
"Other"                 = "No answer",
"Other"                 = "Don't know",
"Other"                 = "Other party"
)
)
gss_cat |>
mutate(
partyid = fct_collapse(partyid,
"other" = c("No answer", "Don't know", "Other party"),
"rep" = c("Strong republican", "Not str republican"),
"ind" = c("Ind,near rep", "Independent", "Ind,near dem"),
"dem" = c("Not str democrat", "Strong democrat")
)
) |>
count(partyid)
gss_cat |>
mutate(relig = fct_lump_lowfreq(relig)) |>
count(relig)
gss_cat |>
mutate(relig = fct_lump_n(relig, n = 10)) |>
count(relig, sort = TRUE)
ordered(c("a", "b", "c"))
