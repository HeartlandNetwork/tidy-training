str_view()
words
words |>
str_replace("(^.)\\1)") |>
str_view()
str_view(words, "^a|b$")
str_view(words, "^a|b$") |>
print(n = 67)
words |>
str_replace("(^)\\1)") |>
str_view()
str_view(words, "^.|.$") |>
print(n = 67)
words |>
str_replace("(^.)\\1)") |>
str_view()
str_replace_all("abc", c("$", "^", "\\b"), "--")
str_replace_all(words, c("$", "^", "\\b"), "--")
str_replace(words, c("$", "^", "\\b"), "--")
str_view(words, "^.|.$") |>
print(n = 67)
str_replace_all(words, "^.|.$", "--")
str_replace_all(words, "^.|.$", ".S|^.")
str_view(words, "^.|.$") |>
print(n = 67)
str_view(words, "^\D")
str_view(words, "\D")
str_view(words, "\D")
words
library(tidyverse)
library(babynames)
str_view(words, "^.")
str_view(words, ".$")
str_view(words, "^.|.$") |>
print(n = 67)
sentences |>
str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |>
str_view()
sentences
glimpse(sentences)
sentences |>
str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |>
str_view()
words |>
str_replace("(^.) (.$)", "\\2  \\1") |>
str_view()
words |>
str_replace("(a) (b)", "\\2  \\1") |>
str_view()
str_view(words, "^(..).*\\1$")
str_view(words, "^(.).*\\1$")
sentences |>
str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |>
str_view()
words |>
str_replace("(^) (\\w+) ($)", "\\1 \\3 \\2") |>
str_view()
words |>
str_replace("(^) ([a-z]) ($)", "\\1 \\3 \\2") |>
str_view()
words |>
str_replace("(^.)(.$)", "\\2 \\1") |>
str_view()
words |>
str_replace("(^?)(.?)", "\\2 \\1") |>
str_view()
words |>
str_replace("(^?)(..?)", "\\2 \\1") |>
str_view()
words |>
str_replace("(^?)(ad)", "\\2 \\1") |>
str_view()
words |>
str_replace("(^?)(a)", "\\2 \\1") |>
str_view()
words |>
str_replace("(^+)(a)", "\\2 \\1") |>
str_view()
words |>
str_replace("(e)(a)", "\\2 \\1") |>
str_view()
words |>
str_replace("(a)(e)", "\\2 \\1") |>
str_view()
words |>
str_replace("(.)(e)", "\\2 \\1") |>
str_view()
words |>
str_replace("(.)(e)", "\\2 \\1") |>
str_view()
words |>
str_replace("(.)(e)", "\\1 \\2") |>
str_view()
str_view(words, "^(.).*\\1$")
str_view(words, "^.|.$") |>
print(n = 67)
library(tidyverse)
library(babynames)
str_view(words, "^.|.$") |>
print(n = 67)
sentences |>
str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |>
str_view()
sentences |>
str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |>
str_view()
words |>
str_replace("(\\D+) (\\w+) (Dw+)", "\\1 \\3 \\2")
words |>
str_replace("(\\D+) (\\D+) (\\D+)", "\\1 \\3 \\2")
words |>
str_replace("(\\D) (\\D) (\\D)", "\\1 \\3 \\2") |>
str_view()
words |>
str_view("a")
words |>
str_view(".")
words |>
str_view("..")
words |>
str_view("^.")
words |>
str_view(".$")
words |>
str_replace("(^.)(.$)", "\\2 \\1") |>
str_view()
words |>
str_replace_all("(^.)(.$)", "\\2 \\1") |>
str_view()
words |>
str_view("(^.)(.$)")
words |>
str_view("(^)($)")
words |>
str_view("(^+)(+$)")
words |>
str_view("(^|$)")
words |>
str_view("(^.|$.)")
words |>
str_view("(^.|.$)")
words |>
str_replace("(^.|.$)", "\\2, \\1") |>
str_view()
words |>
str_replace("(^.|.$)", "\\1") |>
str_view()
words |>
str_replace("(^.|.$)", "x") |>
str_view()
words |>
str_replace("(^.&.$)", "x") |>
str_view()
words |>
str_replace("(.$)", "x") |>
str_view()
words |>
str_replace("(.$)(x)", "\\2 \\1") |>
str_view()
str_replace(fruits, "([aeiou])", "\\1\\1")
str_replace(words, "([aeiou])", "\\1\\1")
words |>
str_replace( "([aeiou])", "\\1\\1") |>
str_view()
words |>
str_replace( "([aeiou])", "\\1\\1\\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2 \\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2\\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2    \\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\1    \\2") |>
str_view()
words |>
str_replace( "(^[aeiou])([aeiou]$)", "\\1    \\2") |>
str_view()
words |>
str_replace( "([aeiou]) ([aeiou])", "\\1    \\2") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z])", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z]$)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^[a-z])([a-z]$)", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z])", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z])([a-z])", "\\3\\2\\1") |>
str_view()
words |>
str_replace( "(^[a-z])([a-z]$)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)(e$)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(e)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)($e)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(e)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(c)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a) (l)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)", "\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)", "\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)", "\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)", "\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)(e)", "\\8\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)", "\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)", "\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)", "\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)(e)", "\\8\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)(e)", "\\8\\1") |>
str_view()
words |>
str_replace( "(a)([a - z]),(e)", "\\3\\1") |>
str_view()
words |>
str_replace( "(a)([a - z]+),(e)", "\\3\\1") |>
str_view()
words |>
str_replace( "(a)(e)", "\\8\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(c)(t))", "\\2\\1") |>
str_view()
words |>
str_replace( "(c)(t)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)(e$)", "\\2\\1") |>
str_view()
str_view(words, "^.*$")
library(tidyverse)
str_view(words, "^.*$")
glimpse(words)
str_view(words, "\\{.+\\}")
str_view(sentences, "^.*$")
str_view(words, "\\{.+\\}")
x <- "\\"
str_view(x , "\\{.+\\}")
x <- "\\\\"
str_view(x , "\\{.+\\}")
x <- "{"
str_view(x , "\\{.+\\}")
x <- "{aa\\\\"
str_view(x , "\\{.+\\}")
library(tidyverse)
library(babynames)
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
str_view(c("a", "ab", "abb"), "ab+")
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
# ? makes a pattern optional (i.e. it matches 0 or 1 times)
# + lets a pattern repeat (i.e. it matches at least once)
# * lets a pattern be optional or repeat (i.e. it matches any number of times,
# including 0).
library(tidyverse)
library(babynames)
glimpse(fruit)
glimpse(words)
glimpse(sentences)
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
# ? makes a pattern optional (i.e. it matches 0 or 1 times)
# + lets a pattern repeat (i.e. it matches at least once)
# * lets a pattern be optional or repeat (i.e. it matches any number of times,
# including 0).
str_view(c("a", "ab", "abb"), "ab?")
str_view(c("a", "ab", "abb"), "ab?")
str_view(c("a", "ab", "abb"), "ab+")
str_view(c("a", "ab", "abb"), "ab*")
str_view(words, "[aeiou]th[aeiou]")
str_view(words, "[^aeiou]oo[^aeiou]")
str_view(fruit, "apple|melon|nut")
str_view(words, "[^aeiou]y[^aeiou]")
# regex overview
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# outline and terminology ------------------------------------------------------
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# outline and terminology -------
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
##################################
# regex outline and terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
##################################
# regex outline and terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# detect matches
# count matches
# replace values
##################################
# regex outline and terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# detect matches
# str_detect()
# count matches
# str_count()
# replace values
# str_replace()
# str_replace_all()
##################################
# regex terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# detect - str_detect()
# count - str_count()
# replace - str_replace() and str_replace_all()
# extract
# separate_wider_regex()
# sepaparet
##################################
# regex terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# str_detect()
# str_count()
# str_replace() and str_replace_all()
# extract variables
# separate_wider_regex()
# separate_wider_delim()
# separate_wider_position()
