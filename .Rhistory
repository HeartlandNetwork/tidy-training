test = c( '(417) 732')
test
test = c( '(417) 732-')
test
test = c( '(417) 732-2662')
test
tel_number <- C("(417) 732-2662")
test <- c( '(417) 732-2662')
tel_no <- c( '(417) 732-2662')
tel_no
str_view(tel_no, "(\\d{3})\\d{3}\-\\d{4}")
tel_no <- c( '(417) 732-2662')
str_view(tel_no, "(\\d{3})")
str_view(tel_no, "(\\d+)")
str_view(tel_no, "(\\d+)")
#  4. Create a regular expression that will match telephone numbers as commonly
tel_no <- c( '(417) 732-2662')
str_view(tel_no, "(\\d+)")
str_view(tel_no, "(\\d+)")
str_view(tel_no, "\\d+")
str_view(tel_no, "(")
str_view(tel_no, "\(")
str_view(tel_no, "\\(")
str_view(tel_no, "\\(\\d+")
str_view(tel_no, "\\(\\d+\\)")
str_view(tel_no, "\\(\\d+\\)\\d+\\-")
tel_no <- c( '(417) 732-2662')
str_view(tel_no, "\\(\\d+\\)\\d+\\-")
str_view(tel_no, "\\(\\d+\\)\\d+")
str_view(tel_no, "\\(\\d+\\)")
str_view(tel_no, "\\(\\d+\\)")
str_view(tel_no, "\\(\\d+\\)\\d+")
str_view(tel_no, "\\(\\d+\\)d+")
str_view(tel_no, "\\([0-9])")
str_view(tel_no, "\\(\\d+)")
str_view(tel_no, "\\(\\d+\\)")
str_view(tel_no, "\\(\\d+\\) [0-9]")
str_view(tel_no, "\\(\\d+\\) [0-9]+")
str_view(tel_no, "\\(\\d+\\) [0-9]+ "-")
str_view(tel_no, "\\(\\d+\\) [0-9]+ \\- )
str_view(tel_no, "\\(\\d+\\) [0-9]+ \-" )
str_view(tel_no, "\\(\\d+\\) [0-9]+ \\-" )
str_view(tel_no, "\\(\\d+\\) [0-9]+ -" )
str_view(tel_no, "\\(\\d+\\) [0-9]+" )
str_view(tel_no, "\\(\\d+\\) [0-9]+ \-")
str_view(tel_no, "\\(\\d+\\) [0-9]+ \\-")
str_view(tel_no, "\\(\\d+\\) [0-9]+\\-")
str_view(tel_no, "\\(\\d+\\) [0-9]+\\-[0-9]")
str_view(tel_no, "\\(\\d+\\) [0-9]+\\-[0-9]+")
# Ch15 - Regular Expressions
#===============================================================================
library(tidyverse)
library(babynames)
# 15.3.5 Exercises -------------------------------------------------------------
#  1. What baby name has the most vowels? What name has the highest proportion of
#  vowels? (Hint: what is the denominator?)
df <- babynames |>
count(name) |>
mutate(
name = str_to_lower(name),
vowels = str_count(name, "[aeiou]"),
) |>
arrange(desc(vowels))
df
df <- df |>
mutate(
prop_vowels = vowels / n
)|>
arrange(desc(vowels))
df
#  2. Replace all forward slashes in "a/b/c/d/e" with backslashes. What happens if
#   you attempt to undo the transformation by replacing all backslashes with
#   forward slashes? (We’ll discuss the problem very soon.)
my_string <- c("a/b/c/d/e")
my_string <- str_replace_all(my_string, "//", "\\")
# This throws the error below...
# my_string <- str_replace_all(my_string, "\\", "//")
# Error in stri_replace_all_regex(string, pattern, fix_replacement(replacement),  :
#      Unrecognized backslash escape sequence in pattern. (U_REGEX_BAD_ESCAPE_SEQUENCE, context=`\`)
#  3. Implement a simple version of str_to_lower() using str_replace_all().
my_string <- c("This is My String")
str_replace_all(my_string, "[A-Z]", tolower)
#  4. Create a regular expression that will match telephone numbers as commonly
tel_no <- c( '(417) 732-2662')
str_view(tel_no, "\\(\\d+\\) [0-9]+\\-[0-9]+")
ls <- c("\\'\\\\?")
ls
ls <- c("'\\\\?")
ls
# 15.4.7 Exercises -------------------------------------------------------------
# 1, How would you match the literal string "'\? How about "$^$"?
ls <- c("'\\\\?")
ls
ls <- c("'\\?")
ls
ls <- c("'\?")
ls <- c("'?")
ls
ls <- c("'\\?")
ls
ls <- c("'\?")
ls <- c("'?")
ls
ls <- c("'\\\?")
ls <- c("'\\")
ls
ls <- "'\\"
ls
ls <- "'\\"
ls
ls
ls <- "\'\\"
ls
ls <- "\' \\"
ls
ls <- "\\"
ls
ls <- "\\"
strview(ls)
ls <- "\\"
str_view(ls)
ls <- "\'\\"
str_view(ls)
ls <- "\'\\"
ls <- str_view(ls)
ls
ls <- "\'\\"
ls <- str_view(ls)
str_view(ls, "\'\\")
ls <- str_c("\', \\")
ls
ls <- str_c("\'", "\\")
ls
ls <- str_c("'", "\\")
ls
ls <- str_c("'", "\\\\")
ls
x <- "C:\\\\Users\\\\jd\\\\Documents\\\\folder\\\\file.txt"
x
x <- "C:\\Users\\jd\\Documents\\folder\\file.txt"
x
# Ch15 - Regular Expressions
#===============================================================================
library(tidyverse)
library(babynames)
# 15.3.5 Exercises -------------------------------------------------------------
#  1. What baby name has the most vowels? What name has the highest proportion of
#  vowels? (Hint: what is the denominator?)
df <- babynames |>
count(name) |>
mutate(
name = str_to_lower(name),
vowels = str_count(name, "[aeiou]"),
) |>
arrange(desc(vowels))
df
df <- df |>
mutate(
prop_vowels = vowels / n
)|>
arrange(desc(vowels))
df
#  2. Replace all forward slashes in "a/b/c/d/e" with backslashes. What happens if
#   you attempt to undo the transformation by replacing all backslashes with
#   forward slashes? (We’ll discuss the problem very soon.)
my_string <- c("a/b/c/d/e")
my_string <- str_replace_all(my_string, "//", "\\")
# This throws the error below...
# my_string <- str_replace_all(my_string, "\\", "//")
# Error in stri_replace_all_regex(string, pattern, fix_replacement(replacement),  :
#      Unrecognized backslash escape sequence in pattern. (U_REGEX_BAD_ESCAPE_SEQUENCE, context=`\`)
#  3. Implement a simple version of str_to_lower() using str_replace_all().
my_string <- c("This is My String")
str_replace_all(my_string, "[A-Z]", tolower)
#  4. Create a regular expression that will match telephone numbers as commonly
tel_no <- c( '(417) 732-2662')
str_view(tel_no, "\\(\\d+\\) [0-9]+\\-[0-9]+")
# 15.4.7 Exercises -------------------------------------------------------------
# 1, How would you match the literal string "'\" ? How about "$^$"?
ls <- str_c("'", "\\\\")
ls
str_view(ls, "\'\\")
x <- "C:\\Users\\jd\\Documents\\folder\\file.txt"
x
x <- "C:\Users\jd\Documents\folder\file.txt"
x <- "C:\\Users\\jd\\Documents\\folder\\file.txt"
str_view(x)
ls <- str_c("'", "\\\\")
str_view(ls, "\'\\")
str_view("\'\\")
str_view("\'\\")
ls <- str_view("\'\\")
ls <- str_view("\'\\")
ls
str_match(ls, "\'\\")
ls <- str_view("\'\\")
ls
str_match(ls, "\'")
ls <- str_view("\'\\")
ls
str_match(ls, "\' \\ ")
ls <- c("\'\\")
ls
ls <- c("\'\\")
ls
str_view(ls)
str_match(ls, "\'\\ ")
str_match(ls, "\' ")
str_match(ls, "\'")
str_match(ls, "\'\\")
ls <- c("\'\\")
ls
str_view(ls)
ls <- c("\'\\")
ls
str_view(ls)
library(tidyverse)
library(babynames)
ls <- c("\'\\")
ls
str_view(ls)
str_view(ls, "")   # <<<<<<<<<< left off here ....
ls <- c("\'\\")
ls
str_view(ls)
str_view(ls, "\'")
ls <- c("\'\\")
ls
str_view(ls)
str_view(ls, "\'\\")
ls <- c("\'\\")
ls
str_view(ls)
str_view(ls, "\'\\\\" )
ls <- c("$'\^\$")
ls <- c("\$\^\$")
ls <- c("$\^$")
ls <- c("$^$")
str_view(ls)
str_view(ls, "$^$" )
str_view(ls, "\$" )
str_view(ls, "\\$" )
str_view(ls, "\\$\\^" )
str_view(ls, "\\$\\^\\$" )
str_match(ls, "\\")
str_match(ls, "\\\\")
str_match(ls, "\\+")
str_match(ls, "\\\\+")
str_match(ls, "\\\\")
ls |>
str_match("\\\\")
str_match(ls, "\\")
words
words |>
str_view("^y")
words |>
str_view("[^y+]")
words |>
str_view("^y")
words |>
str_view("^^y")
words |>
str_view("^\^y")
words |>
str_view("^\\^y")
words |>
str_view("^[^y]")
words |>
str_view("^[^y]") |>
print( n = 964)
words |>
str_view("^[^y]") |>
print( n = 974)
words |>
str_view("$x")
words |>
str_view("$[x]")
words |>
str_view("x")
words |>
str_view("^x")
words |>
str_view("^X")
words |>
str_view("^y")
words |>
str_view("^\X")
words |>
str_view("^\\X")
words |>
str_view("^a")
words |>
str_view("x")
words |>
str_view("$x")
words
my_word = c('x')
my_word = c('rex')
my_word = c('rex')
my_word
my_word |>
str_view("$x")
words |>
str_view("x")
my_word |>
str_view("[a-z]x")
words |>
str_view("[a-z]x")
words |>
str_view("x")
words |>
str_view("^x")
words
words
my_word = c('rex')
#   a. Start with “y”.
words |>
str_view("^y")
#   b. Don’t start with “y”.
words |>
str_view("^[^y]") |>
print( n = 974)
#   c. End with “x”.
words |>
str_view("x")
my_word |>
str_view("^x")
my_word |>
str_view("x")
words |>
str_view("x$")
library(tidyverse)
library(tidyverse)
library(babynames)
words |>
str_view({3})
words |>
str_view("{3}")
words |>
words |>
str_view("[a-z]{3}")
words |>
str_view("[a-z]{3}")
words |>
str_view("[a-z]{3} ")
words |>
str_view("[a-z]{3}")
words |>
str_view("[a-z]{3}")
words |>
str_view("[a-z]{3} ")
words |>
str_view("[a-z]{3}\s")
words |>
str_view("[a-z]{3}\s?")
words |>
str_view("[a-z\s]{3}")
words |>
str_view("[a-z]{3}\\s+")
words |>
str_view("^[a-z]{3}")
words |>
str_view("^[a-z]{3}\b")
words |>
str_view("^[a-z]{3}\\b")
words |>
str_view("^[a-z]{3}\\b") |>
print(n = 100)
words |>
str_view("^[a-z]{3}\\b") |>
print(n = 110)
words |>
str_view("^[a-z]{7}")
word |>
str_view("[aeiou]{1}[^aeiou]")
word |>
str_view("[aeiou][^aeiou]")
word |>
str_view("[aeiou]")
word
words |>
str_view("[aeiou]")
words |>
str_view("[aeiou]")
words |>
str_view("[aeiou]{1}")
words |>
str_view("[aeiou]{1}[^aeiou]{1}")
words |>
str_view("^[a-z]{7}")
words |>
str_view("[aeiou][^aeiou]")
words |>
str_view("[aeiou]{1}[^aeiou]{1}")
words |>
str_view("[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}\\b")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}")
words |>
str_view("[aeiou]{1}[^aeiou]{1}")
words |>
str_view("[aeiou]{1}[^aeiou]{1,10}")
words |>
str_view("[aeiou]{1}[^aeiou]{1}")
words |>
str_view("[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}\\b")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}")
words |>
str_view("[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}\\b")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}\\b")
# 4. Create 1
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}+\\b")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}+")
words |>
str_view("\\b[aeiou]{1}[^aeiou]+")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}+")
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}+") |>
print(n = 33)
words |>
str_view("\\b[aeiou]{1}[^aeiou]{1}[aeiou]{1}[^aeiou]{1}") |>
print(n = 33)
words |>
str_view("[aeiou]{1}[^aeiou]{1}")
words |>
str_view("([aeiou]{1}[^aeiou]{1})\\1$")
str_view(words, "^(..).*\\1$")
str_view(words, "[aeiou]{1}[^aeiou]\\1$")
str_view(words, "[aeiou]{1}[^aeiou]")
x <- "airplane"
str_view(x, "ir")
#===============================================================================
library(tidyverse)
library(babynames)
# 15.3.5 Exercises ----
x <- "airplane"
str_view(x, "ir")
x <- "aeroplane"
str_view(x, "ero")
# aluminum/aluminium
x <- "aluminum"
str_view(x, "nu")
x <- "aluminium"
str_view(x, "niu")
x <- "analog"
str_view(x, "$g")
str_view(x, "g$")
x <- "analogue"
str_view(x, "g$")
x <- "analogue"
str_view(x, "gue$")
# ass/arse
x <- "ass"
str_view(x, "s$")
x <- "arse"
str_view(x, "e$")
# center/centre
x <- "center"
str_view(x, "r$")
x <- "centre"
str_view(x, "e$")
# defense/defence
x <- "defense"
str_view(x, "se$")
x <- "defence"
str_view(x, "ce$")
str_view(x, "ce$")
# donut/doughnut
x <- "donut"
str_view(x, "^dou")
x <- "doughnut"
str_view(x, "$don")
# donut/doughnut
x <- "donut"
str_view(x, "on")
x <- "doughnut"
str_view(x, "ou")
# gray/grey
x <- "gray"
str_view(x, "ay$")
x <- "grey"
str_view(x, "ey$")
# modeling/modelling
x <- "modeling"
str_view(x, "eli")
x <- "modelling"
str_view(x, "elli")
# skeptic/sceptic
x <- "skeptic"
str_view(x, "^sk")
x <- "sceptic"
str_view(x, "^sc")
# summarize/summarise
x <- "summarize"
str_view(x, "ze$")
x <- "summarise"
str_view(x, "se$")
