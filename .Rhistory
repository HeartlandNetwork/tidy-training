str_view()
words |>
str_replace( "([aeiou])", "\\1\\1\\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2 \\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2\\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2    \\1") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\1    \\2") |>
str_view()
words |>
str_replace( "(^[aeiou])([aeiou]$)", "\\1    \\2") |>
str_view()
words |>
str_replace( "([aeiou]) ([aeiou])", "\\1    \\2") |>
str_view()
words |>
str_replace( "([aeiou])([aeiou])", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z])", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z]$)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^[a-z])([a-z]$)", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z])", "\\2\\1") |>
str_view()
words |>
str_replace( "([a-z])([a-z])([a-z])", "\\3\\2\\1") |>
str_view()
words |>
str_replace( "(^[a-z])([a-z]$)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)(e$)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(e)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)($e)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(e)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(c)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a) (l)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)", "\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)", "\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)", "\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)", "\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)(e)", "\\8\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)", "\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)", "\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)", "\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)(e)", "\\8\\7\\6\\5\\4\\3\\2\\1") |>
str_view()
words |>
str_replace( "(a)(b)(s)(o)(l)(u)(t)(e)", "\\8\\1") |>
str_view()
words |>
str_replace( "(a)([a - z]),(e)", "\\3\\1") |>
str_view()
words |>
str_replace( "(a)([a - z]+),(e)", "\\3\\1") |>
str_view()
words |>
str_replace( "(a)(e)", "\\8\\1") |>
str_view()
words |>
str_replace( "(a)(b)", "\\2\\1") |>
str_view()
words |>
str_replace( "(c)(t))", "\\2\\1") |>
str_view()
words |>
str_replace( "(c)(t)", "\\2\\1") |>
str_view()
words |>
str_replace( "(^a)(e$)", "\\2\\1") |>
str_view()
str_view(words, "^.*$")
library(tidyverse)
str_view(words, "^.*$")
glimpse(words)
str_view(words, "\\{.+\\}")
str_view(sentences, "^.*$")
str_view(words, "\\{.+\\}")
x <- "\\"
str_view(x , "\\{.+\\}")
x <- "\\\\"
str_view(x , "\\{.+\\}")
x <- "{"
str_view(x , "\\{.+\\}")
x <- "{aa\\\\"
str_view(x , "\\{.+\\}")
library(tidyverse)
library(babynames)
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
str_view(c("a", "ab", "abb"), "ab+")
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
# ? makes a pattern optional (i.e. it matches 0 or 1 times)
# + lets a pattern repeat (i.e. it matches at least once)
# * lets a pattern be optional or repeat (i.e. it matches any number of times,
# including 0).
library(tidyverse)
library(babynames)
glimpse(fruit)
glimpse(words)
glimpse(sentences)
str_view(fruit, "berry")
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
# ? makes a pattern optional (i.e. it matches 0 or 1 times)
# + lets a pattern repeat (i.e. it matches at least once)
# * lets a pattern be optional or repeat (i.e. it matches any number of times,
# including 0).
str_view(c("a", "ab", "abb"), "ab?")
str_view(c("a", "ab", "abb"), "ab?")
str_view(c("a", "ab", "abb"), "ab+")
str_view(c("a", "ab", "abb"), "ab*")
str_view(words, "[aeiou]th[aeiou]")
str_view(words, "[^aeiou]oo[^aeiou]")
str_view(fruit, "apple|melon|nut")
str_view(words, "[^aeiou]y[^aeiou]")
# regex overview
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# outline and terminology ------------------------------------------------------
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# outline and terminology -------
# regex overview
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
##################################
# regex outline and terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
##################################
# regex outline and terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# detect matches
# count matches
# replace values
##################################
# regex outline and terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# detect matches
# str_detect()
# count matches
# str_count()
# replace values
# str_replace()
# str_replace_all()
##################################
# regex terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# detect - str_detect()
# count - str_count()
# replace - str_replace() and str_replace_all()
# extract
# separate_wider_regex()
# sepaparet
##################################
# regex terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# str_detect()
# str_count()
# str_replace() and str_replace_all()
# extract variables
# separate_wider_regex()
# separate_wider_delim()
# separate_wider_position()
##################################
# regex terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# str_detect()
# str_count()
# str_replace() and str_replace_all()
# extract variables
# separate_wider_regex()
# separate_wider_delim()
# separate_wider_position()
# pattern details
# escaping
# anchors
# character classes or sets
# quantifiers
# operator precedence
# grouping and capturing
# capturing groups
# back reference
# pattern control
# regex flags
# flags
# fixed matches
# practice
# check your work
# boolean operators
# creating a pattern with code
# regex expressions in other places
# tidyverse
# base R
# summary
library(tidyverse)
library(babynames)
fruit
words
sentences
str_view(fruit, "berry")
berries <- str_view(fruit, "berry")
berries
str_view(fruit, "berry")
# metacharacters
# ., +, *, [, ], and ?
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
# quantifiers
# ? makes a pattern optional (i.e. it matches 0 or 1 times)
# + lets a pattern repeat (i.e. it matches at least once)
# * lets a pattern be optional or repeat (i.e. it matches any number of
#   times, including 0).
# metacharacters
# ., +, *, [, ], and ?
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
# Ch15 - Regular Expressions
#===============================================================================
##################################
# regex terminology
# prerequisites
# tidyverse
# babynames
# stringr char vectors
# fruit
# words
# sentences
# pattern basics
# literal characters
# metacharacters
# quantifiers
# character classes
# except
# alternation
# key functions
# str_detect()
# str_count()
# str_replace() and str_replace_all()
# extract variables
# separate_wider_regex()
# separate_wider_delim()
# separate_wider_position()
# pattern details
# escaping
# anchors
# character classes or sets
# quantifiers
# operator precedence
# grouping and capturing
# capturing groups
# back reference
# pattern control
# regex flags
# flags
# fixed matches
# practice
# check your work
# boolean operators
# creating a pattern with code
# regex expressions in other places
# tidyverse
# base R
# summary
#-------------------------------------------------------------------------------
# prerequisites
# tidyverse
# babynames
library(tidyverse)
library(babynames)
# stringr char vectors
# fruit
# words
# sentences
fruit
words
sentences
# pattern basics ---------------------------------------------------------------
# example of literal characters
str_view(fruit, "berry")
# metacharacters
# ., +, *, [, ], and ?
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
str_view(fruit, "a...e")
# quantifiers
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
# ab+ matches an "a", followed by at least one "b".
str_view(c("a", "ab", "abb"), "ab+")
# ab* matches an "a", followed by any number of "b"s.
str_view(c("a", "ab", "abb"), "ab*")
# quantifiers
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
# ab+ matches an "a", followed by at least one "b".
str_view(c("a", "ab", "abb"), "ab+")
# ab* matches an "a", followed by any number of "b"s.
str_view(c("a", "ab", "abb"), "ab*")
# character classes
# character classes
# Character classes are defined by []
str_view(words, "[aeiou]x[aeiou]")
# except [^abcd]
str_view(fruit, "apple|melon|nut")
# character classes
# character classes are defined by []
str_view(words, "[aeiou]x[aeiou]")
# except [^abcd]
str_view(words, "[^aeiou]y[^aeiou]")
# character classes
# character classes are defined by []
str_view(words, "[aeiou]x[aeiou]")
# except [^abcd]
str_view(words, "[^aeiou]y[^aeiou]")
